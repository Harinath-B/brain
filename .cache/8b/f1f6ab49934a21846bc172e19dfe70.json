{"id":"shaders/brain.vertex.glsl","dependencies":[{"name":"/home/hari/Desktop/mystery-ai/brain/src/shaders/modules/rotate.glsl","includedInParent":true,"mtime":1704390564757},{"name":"/home/hari/Desktop/mystery-ai/brain/package.json","includedInParent":true,"mtime":1704390744954}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform vec3 uPointer;\\nuniform vec3 uColor;\\nuniform float uRotation;\\nuniform float uSize;\\nuniform float uHover;\\n\\nvarying vec3 vColor;\\n\\n#define PI 3.14159265359\\n\\nmat2 rotate(float angle) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n\\n  return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n  // First, calculate `mvPosition` to get the distance between the instance and the\\n  // projected point `uPointer`.\\n  vec4 mvPosition = vec4(position, 1.0);\\n  mvPosition = instanceMatrix * mvPosition;\\n\\n  // Distance between the point projected from the mouse and each instance\\n  float d = distance(uPointer, mvPosition.xyz);\\n\\n  // Define the color depending on the above value\\n  float c = smoothstep(0.45, 0.1, d);\\n\\n  float scale = uSize + c*8.*uHover;\\n  vec3 pos = position;\\n  pos *= scale;\\n  pos.xz *= rotate(PI*c*uRotation + PI*uRotation*0.43);\\n  pos.xy *= rotate(PI*c*uRotation + PI*uRotation*0.71);\\n\\n  // Re-define `mvPosition` with the scaled and rotated position.\\n  mvPosition = instanceMatrix * vec4(pos, 1.0);\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\\n\\n  vColor = uColor;\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1170},"source":"shaders/brain.vertex.glsl","original":{"line":1,"column":1168}}],"sources":{"shaders/brain.vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform vec3 uPointer;\\nuniform vec3 uColor;\\nuniform float uRotation;\\nuniform float uSize;\\nuniform float uHover;\\n\\nvarying vec3 vColor;\\n\\n#define PI 3.14159265359\\n\\nmat2 rotate(float angle) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n\\n  return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n  // First, calculate `mvPosition` to get the distance between the instance and the\\n  // projected point `uPointer`.\\n  vec4 mvPosition = vec4(position, 1.0);\\n  mvPosition = instanceMatrix * mvPosition;\\n\\n  // Distance between the point projected from the mouse and each instance\\n  float d = distance(uPointer, mvPosition.xyz);\\n\\n  // Define the color depending on the above value\\n  float c = smoothstep(0.45, 0.1, d);\\n\\n  float scale = uSize + c*8.*uHover;\\n  vec3 pos = position;\\n  pos *= scale;\\n  pos.xz *= rotate(PI*c*uRotation + PI*uRotation*0.43);\\n  pos.xy *= rotate(PI*c*uRotation + PI*uRotation*0.71);\\n\\n  // Re-define `mvPosition` with the scaled and rotated position.\\n  mvPosition = instanceMatrix * vec4(pos, 1.0);\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * mvPosition;\\n\\n  vColor = uColor;\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"c9ea8078c92296d21a5c822ab4fb323c","cacheData":{"env":{}}}